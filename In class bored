import pygame
import sys

# Define logic gate functions
def and_gate(a, b):
    return a and b

def or_gate(a, b):
    return a or b

def not_gate(a):
    return not a

def xor_gate(a, b):
    return a ^ b

# Initialize pygame
pygame.init()

# Screen dimensions
WIDTH, HEIGHT = 800, 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Pong Game with Logic Gates")

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)

# Ball properties
ball_speed_x = 4
ball_speed_y = 4
ball = pygame.Rect(WIDTH // 2 - 15, HEIGHT // 2 - 15, 30, 30)

# Paddle properties
paddle_width, paddle_height = 10, 100
player = pygame.Rect(WIDTH - 20, HEIGHT // 2 - paddle_height // 2, paddle_width, paddle_height)
opponent = pygame.Rect(10, HEIGHT // 2 - paddle_height // 2, paddle_width, paddle_height)

player_speed = 0
opponent_speed = 4

# Clock for controlling frame rate
clock = pygame.time.Clock()

# Game loop
while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()

        # Player controls
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_UP:
                player_speed = -6
            if event.key == pygame.K_DOWN:
                player_speed = 6
        if event.type == pygame.KEYUP:
            if or_gate(event.key == pygame.K_UP, event.key == pygame.K_DOWN):
                player_speed = 0

    # Ball movement
    ball.x += ball_speed_x
    ball.y += ball_speed_y

    # Ball collision with top and bottom walls
    if or_gate(ball.top <= 0, ball.bottom >= HEIGHT):
        ball_speed_y = -ball_speed_y

    # Ball collision with paddles
    if or_gate(ball.colliderect(player), ball.colliderect(opponent)):
        ball_speed_x = -ball_speed_x

    # Opponent AI
    if and_gate(opponent.top < ball.y, not_gate(opponent.bottom >= HEIGHT)):
        opponent.y += opponent_speed
    if and_gate(opponent.bottom > ball.y, not_gate(opponent.top <= 0)):
        opponent.y -= opponent_speed

    # Player movement
    player.y += player_speed
    player.y = max(0, min(HEIGHT - paddle_height, player.y))

    # Ball reset if it goes out of bounds
    if ball.left <= 0 or ball.right >= WIDTH:
        ball.center = (WIDTH // 2, HEIGHT // 2)
        ball_speed_x *= -1

    # Drawing everything
    screen.fill(BLACK)
    pygame.draw.rect(screen, WHITE, player)
    pygame.draw.rect(screen, WHITE, opponent)
    pygame.draw.ellipse(screen, WHITE, ball)
    pygame.draw.aaline(screen, WHITE, (WIDTH // 2, 0), (WIDTH // 2, HEIGHT))

    # Update display
    pygame.display.flip()

    # Control frame rate
    clock.tick(60)

